{"version":3,"sources":["compontents/CreateTaskForm/CreateTaskForm.jsx","compontents/Task/TaskItem.jsx","compontents/TasksList/TasksList.jsx","App.js","serviceWorker.js","index.js"],"names":["CreateTaskForm","inputValue","setInputValue","setTasks","tasks","setPopup","useState","wobble","setWobble","wobblereject","setWobbleReject","className","type","value","onChange","e","currentValue","target","placeholder","onClick","preventDefault","newArr","name","id","Math","floor","random","completed","sort","x","y","onAnimationEnd","TaskItem","taskName","changedTasks","map","task","currentTasks","filter","completedTasks","reverse","concat","newTasks","TasksList","tasksArr","key","App","useEffect","localStorage","getItem","setItem","JSON","stringify","localTasks","parse","getLocalTasks","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cda271f3.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst  CreateTaskForm = ({ inputValue, setInputValue, setTasks, tasks, setPopup }) => {\n    const [wobble, setWobble] = useState(0);\n    const [wobblereject, setWobbleReject] = useState(0);\n \n\n    const handleChange = (e) => {\n        const currentValue = e.target.value;\n        setInputValue(currentValue);\n    }\n\n    const addTask = (e) => {\n        e.preventDefault();\n\n        if (inputValue !== '') {\n            const newArr = [...tasks, {name: inputValue, id: Math.floor(Math.random() * 100000), completed: false}];\n            setTasks(newArr.sort((x, y) => x.completed - y.completed));\n\n            setWobble(1);\n            setInputValue('');\n        } else {\n            setWobbleReject(1);\n        }\n    }\n\n    return (\n        <form className=\"main__create-box\">\n            <input\n                type=\"text\"\n                className=\"main__input\"\n                value={inputValue}\n                onChange={handleChange}\n                placeholder=\"Текст задачи...\"\n            />\n            <button \n                className=\"btn-add btn\"\n                type=\"submit\"\n                onClick={addTask}\n                onAnimationEnd={() => {\n                    setWobble(0);\n                    setWobbleReject(0);\n                }}\n                wobble={wobble}\n                wobblereject={wobblereject}\n            >\n                Create\n            </button>\n        </form>\n    );\n}\n\nexport default CreateTaskForm;\n","import React from 'react';\n\nconst  TaskItem = ({ taskName, id, completed, tasks, setTasks }) => {\n    const completeHandler = () => {\n        const changedTasks = tasks.map(task => {\n            if (task.id === id) {\n                return ({ ...task, completed: !completed })\n            }\n            return task;\n        });\n\n        const currentTasks = changedTasks.filter(task => !task.completed);\n        const completedTasks = changedTasks.filter(task => task.completed).reverse();\n\n        setTasks(currentTasks.concat(completedTasks));\n    }\n\n    const deleteHandler = () => {\n        const newTasks = tasks.filter(task => task.id !== id);\n        setTasks(newTasks);\n    }\n  \n    return (\n        <li \n            className={!completed ? \"tasks-list__item\" : \"tasks-list__item tasks-list__item_completed\"}\n        >\n            <button type=\"button\" onClick={completeHandler} className={!completed ? \"btn-done btn\" : \"btn-incompleted btn\"}>\n                D\n            </button>      \n            <span className=\"tasks-list__task\">{taskName}</span>\n            <button className=\"btn-remove btn\" type=\"button\" onClick={deleteHandler}>D</button>\n        </li>\n    );\n}\n\nexport default TaskItem;\n","import React from 'react';\n\nimport TaskItem from '../Task/TaskItem';\n\nconst  TasksList = ({ tasks, setTasks }) => {\n\tconst tasksArr = [...tasks]\n\t\t.reverse()\n\t\t.sort((x, y) => x.completed - y.completed)\n\t\t.map((task) => (\n\t\t<TaskItem \n\t\t\ttaskName={task.name}\n\t\t\tkey={task.id}\n\t\t\tid={task.id}\n\t\t\tcompleted={task.completed}\n\t\t\ttasks={tasks}\n\t\t\tsetTasks={setTasks}\n\t\t/>\n\t\t));\n\n\treturn (\n\t\t<ul className=\"tasks-list\">\n\t\t\t{tasksArr}\n\t\t</ul>\n\t);\n}\n\nexport default TasksList;\n","import React, { useState, useEffect } from 'react';\n\nimport './assets/scss/main.scss';\nimport CreateTaskForm from './compontents/CreateTaskForm/CreateTaskForm';\nimport TasksList from './compontents/TasksList/TasksList';\n\nconst  App = () => {\n\tconst [inputValue, setInputValue] = useState('');\n\tconst [tasks, setTasks] = useState([]);\n\n\tconst getLocalTasks = () => {\t\n\t\tif (localStorage.getItem(\"tasks\") === null) {\n\t\t\tlocalStorage.setItem(\"tasks\", JSON.stringify([]));\n\t\t} else {\n\t\t\tconst localTasks = JSON.parse(localStorage.getItem(\"tasks\"));\n\t\t\tsetTasks(localTasks);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tgetLocalTasks();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tlocalStorage.setItem(\"tasks\", JSON.stringify(tasks));\n\t}, [tasks]);\n\t\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"main\">\n\t\t\t\t<h1 className=\"main__title\">\n\t\t\t\t\tTo Do\n\t\t\t\t</h1>\n\t\t\t\t<CreateTaskForm\n\t\t\t\t\tinputValue={inputValue}\n\t\t\t\t\tsetInputValue={setInputValue}\n\t\t\t\t\tsetTasks={setTasks}\n\t\t\t\t\ttasks={tasks} \n\t\t\t\t/>\n\t\t\t\t<TasksList\n\t\t\t\t\ttasks={tasks}\n\t\t\t\t\tsetTasks={setTasks}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}